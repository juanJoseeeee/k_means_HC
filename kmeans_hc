# Importar las bibliotecas necesarias
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import StandardScaler
from sklearn.cluster import KMeans
from sklearn.metrics import silhouette_score, calinski_harabasz_score
from sklearn.model_selection import train_test_split
from sklearn.feature_selection import SelectKBest, f_classif

# Cargar el archivo de datos
data = {
    'CustomerID': range(1, 201),
    'Gender': ['Male', 'Male', 'Female', 'Female', 'Female', 'Female', 'Female', 'Female', 'Male', 'Female', 'Male', 'Female', 'Female', 'Female', 'Male', 'Male', 'Female', 'Male', 'Male', 'Female', 'Male', 'Male', 'Female', 'Male', 'Female', 'Male', 'Female', 'Male', 'Female', 'Female', 'Male', 'Female', 'Male', 'Female', 'Female', 'Female', 'Female', 'Male', 'Female', 'Male', 'Female', 'Male', 'Female', 'Male', 'Female', 'Male', 'Female', 'Female', 'Female', 'Female', 'Female', 'Female', 'Male', 'Female', 'Female', 'Female', 'Male', 'Female', 'Male', 'Female', 'Male', 'Female', 'Female', 'Male', 'Female', 'Male', 'Male', 'Female', 'Female', 'Male', 'Male', 'Female', 'Male', 'Female', 'Female', 'Female', 'Male', 'Male', 'Female', 'Female', 'Male', 'Male', 'Female', 'Male', 'Female', 'Male', 'Male', 'Male', 'Female', 'Male', 'Female', 'Female', 'Female', 'Male', 'Female', 'Female', 'Female', 'Female', 'Male', 'Female', 'Male', 'Male', 'Male', 'Female', 'Male', 'Female', 'Female', 'Female', 'Female', 'Male', 'Female', 'Male', 'Female', 'Male', 'Male', 'Female', 'Male', 'Male', 'Female', 'Female', 'Female', 'Male', 'Female', 'Female', 'Female', 'Male', 'Female', 'Male', 'Female', 'Male', 'Female', 'Male', 'Male', 'Female', 'Female', 'Male', 'Female', 'Female', 'Male', 'Female', 'Male', 'Female', 'Male', 'Female', 'Male', 'Female', 'Male', 'Female', 'Male', 'Female', 'Male', 'Female', 'Female', 'Female', 'Female', 'Female', 'Female', 'Male', 'Female', 'Female', 'Male', 'Male', 'Male', 'Female', 'Female', 'Male', 'Female', 'Female', 'Female', 'Male', 'Female', 'Male', 'Female', 'Female', 'Female', 'Female', 'Female', 'Male', 'Female', 'Male', 'Male', 'Female', 'Male', 'Female', 'Male', 'Female', 'Male', 'Male', 'Female', 'Male', 'Female', 'Male', 'Female', 'Female', 'Male', 'Female', 'Female', 'Male', 'Female', 'Male', 'Female', 'Male', 'Female', 'Male', 'Female', 'Male', 'Male', 'Female', 'Male', 'Male', 'Male', 'Female', 'Male', 'Male', 'Male', 'Male', 'Male', 'Male'],
    'Age': [19, 21, 20, 23, 31, 22, 35, 23, 64, 30, 67, 35, 58, 24, 37, 22, 35, 20, 52, 35, 35, 25, 46, 31, 54, 29, 45, 35, 40, 23, 60, 21, 53, 18, 49, 21, 42, 30, 36, 20, 65, 24, 48, 31, 49, 24, 50, 27, 29, 31, 49, 33, 31, 43, 59, 47, 50, 47, 47, 50, 31, 50, 31, 55, 47, 45, 43, 60, 32, 42, 25, 29, 32, 44, 32, 49, 32, 25, 48, 39, 45, 33, 46, 31, 49, 38, 28, 48, 54, 48, 38, 49, 56, 42, 45, 52, 42, 46, 44, 49, 49, 39, 41, 40, 32, 39, 41, 30, 35, 31, 42, 40, 41, 41, 33, 38, 42, 50, 39, 32, 47, 48, 45, 32, 45, 36, 36, 50, 32, 40, 33, 45, 38, 40, 36, 36, 35, 36, 32, 50, 39, 39, 30, 37, 33, 35, 30, 31, 40, 41, 37, 43, 40, 36, 47, 30, 31, 44, 28, 40, 39, 29, 39, 47, 43, 35, 32, 31, 29, 30, 35, 33, 41, 46, 47, 37, 36, 27, 41, 47, 31, 37, 36, 36, 35, 34, 44, 40, 36],
    'Annual Income (k$)': [15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 23, 23, 24, 24, 25, 25, 28, 28, 28, 28, 29, 29, 30, 30, 33, 33, 33, 33, 33, 33, 34, 34, 37, 37, 38, 38, 39, 39, 39, 40, 40, 40, 42, 43, 43, 43, 43, 44, 44, 44, 46, 46, 46, 46, 47, 47, 48, 48, 48, 48, 48, 49, 50, 50, 54, 54, 54, 54, 54, 54, 54, 54, 55, 55, 56, 57, 59, 59, 59, 59, 61, 61, 62, 62, 63, 63, 63, 64, 64, 65, 65, 66, 66, 67, 67, 68, 68, 70, 71, 72, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 82, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200],
    'Spending Score (1-100)': [39, 81, 6, 77, 40, 76, 6, 94, 3, 72, 14, 99, 15, 77, 13, 79, 35, 66, 29, 98, 35, 73, 5, 73, 14, 82, 32, 61, 31, 87, 4, 73, 4, 92, 14, 81, 17, 73, 26, 75, 35, 92, 36, 61, 28, 65, 55, 47, 42, 42, 52, 60, 54, 55, 46, 56, 50, 46, 51, 60, 40, 59, 75, 52, 58, 64, 54, 50, 54, 52, 59, 47, 57, 42, 47, 40, 38, 49, 43, 50, 44, 39, 24, 68, 85, 39, 53, 49, 72, 51, 44, 90, 80, 68, 52, 64, 69, 46, 45, 55, 92, 84, 73, 51, 50, 36, 56, 53, 64, 65, 35, 87, 42, 75, 62, 66, 71, 64, 61, 76, 52, 35, 90, 70, 43, 68, 32, 75, 44, 83, 51, 63, 87, 75, 45, 85, 91, 87, 79, 80, 79, 93, 51, 51, 59, 58, 41, 45, 28, 92, 75, 69, 79, 87, 86, 91, 95, 75, 81, 92, 90, 64, 73, 42, 62, 74, 78, 72, 66, 63, 89, 74, 55, 92, 92, 89, 93, 85, 58, 47, 88, 79, 52, 93, 74, 91]
}

df = pd.DataFrame(data)

# 1. Análisis exploratorio de los datos
print(df.describe())  # Estadísticas generales
print(df.info())  # Información sobre los tipos de datos

# Visualización de la distribución de los datos
sns.pairplot(df[['Age', 'Annual Income (k$)', 'Spending Score (1-100)']])
plt.show()

# 2. Preprocesar los datos
# Manejo de valores faltantes (no hay en este caso)
# Estandarización de las características numéricas
scaler = StandardScaler()
df_scaled = pd.DataFrame(scaler.fit_transform(df[['Age', 'Annual Income (k$)', 'Spending Score (1-100)']]), columns=['Age', 'Annual Income (k$)', 'Spending Score (1-100)'])

# 3. Selección de características más relevantes
X = df_scaled[['Age', 'Annual Income (k$)', 'Spending Score (1-100)']]
y = df['Gender'].apply(lambda x: 1 if x == 'Male' else 0)  # Conversión de 'Gender' a variable binaria

# Utilizamos SelectKBest para la selección de características
selector = SelectKBest(f_classif, k=2)
X_new = selector.fit_transform(X, y)
print("Características seleccionadas:", df.columns[selector.get_support()])

# 4. Entrenar el modelo
# Usaremos KMeans para segmentar a los clientes
kmeans = KMeans(n_clusters=3, random_state=42)
df['Cluster'] = kmeans.fit_predict(df_scaled[['Age', 'Annual Income (k$)', 'Spending Score (1-100)']])

# 5. Evaluar el desempeño del modelo
silhouette = silhouette_score(df_scaled[['Age', 'Annual Income (k$)', 'Spending Score (1-100)']], df['Cluster'])
calinski = calinski_harabasz_score(df_scaled[['Age', 'Annual Income (k$)', 'Spending Score (1-100)']], df['Cluster'])
print(f"Silhouette Coefficient: {silhouette}")
print(f"Calinski-Harabasz Index: {calinski}")
